# Send Alarm

Send alarm with specific priority level

<code>sendAlarm($priority = 1, $message = "")</code>

```php
<?php

$priority = 1;
$message = "message";
$this->sendAlarm($priority,$message);

?>
```
> Make sure to replace <code>`message`</code> with the custom message form alarm.

Parameter | Default | Description
--------- | ------- | -----------
$priority    | 1       | Alarm priority level, values are (1,2,3,4,5,6)
$message  | ""      | Custom message to put in alarm body

# Play audio message

Use this function to play an audio message previously loaded on the TVox system.

<code>
Ivr_play($val = array())
</code>

```php
<?php

$audioFile = "audio_message";
$result = $this->Ivr_play(array($audioFile, 0));
if($result[0] == TVOX_IVR_CALLER_EXIT){
  $this->RightExitIVR();
}

?>
```

> Make sure to replace <code>`audio_message`</code> with the message to played.


In the example on the right side we can see 
<code>$result[0] == TVOX_IVR_CALLER_EXIT`</code> that check if caller hangup the call and [<code>$this->RightExitIVR()</code>](#exit-with-good-state) close call statistics with correct values.

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with some array values

<code>
$val = array($audioFile, $canInterrupt)
</code>

Parameter |  Description
--------- |  -----------
$audioFile | Audio file's name 
$canInterrupt | Can interrupt file play (possibile values: 1 for interrupt, 0 to not stop play)

# Set call variable

Use this function to save value into call and popup variable 

<code>Ivr_setvar($val = array())</code>

```php
<?php

define("CUSTOMER_CODE", "CUSTOMER_CODE");
$this->Ivr_setvar(array(CUSTOMER_CODE, "value"));

?>
```
> Make sure to replace <code>`value`</code> with the value to save.

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with two parameters 

<code>
$val = array($variableName, $variableValue)
</code>

Parameter |  Description
--------- |  -----------
$variableName | Variable's name to save
$variableValue | Variable's value to save

<aside class="notice">
Call variable is saved on database in <code>`popupinfo`</code> column of  <code>`ast_calls`</code> table and it can used when opening the popup
</aside>

# Get call variable

Get call variable value

<code>Ivr_getvar($val = array())</code>

```php
<?php

define("CUSTOMER_CODE", "CUSTOMER_CODE");
$value = $this->Ivr_getvar(array(CUSTOMER_CODE));

?>
```

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with variable name as value 

# Get digits

Get digits from user interaction and save as call variable

<code>Ivr_get_digit($val = array())</code>

```php
<?php

define("CUSTOMER_CODE", "CUSTOMER_CODE");
$fileName = "audio_file";
$maxDigitNumber = 10;
$timeoutDigit = 5;
$result = $this->Ivr_get_digit(array($fileName, $maxDigitNumber, CUSTOMER_CODE, $timeoutDigit));
if ($result[0] == TVOX_IVR_CALLER_EXIT) {
    $this->RightExitIVR();
}

?>
```

> Get variable value after digits <code>$value = $this->Ivr_getvar(array(CUSTOMER_CODE));</code>
> <code>$result[0] == TVOX_IVR_CALLER_EXIT`</code> check if caller hangup the call and [<code>$this->RightExitIVR()</code>](#exit-with-good-state) close call statistics with correct values.

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with four parameters 

<code>
$val = array($fileName, $variableName, $maxDigits, $timeoutDigits)
</code>

Parameter |  Description
--------- |  -----------
$fileName | Audio file name to play before collect digits
$variableName | Variable name to save
$maxDigits | max digits number
$timeoutDigits | maximum timeout for insert numbers

<aside class="notice">
If need lower digits number than $maxDigits insert # after digits. Remember tell it in audio message
</aside>

# Choose option

Do a choice between array values digits

<code>Ivr_choose_option($val = array())</code>

```php
<?php

$fileName = "audio_file";
$digits = array(1,2,3);
$timeoutDigit = 5;
$this->lastDigit = NULL;
$result = $this->Ivr_choose_option(array($fileName, $digits, null, $timeoutDigit));
if ($result[0] == TVOX_IVR_CALLER_EXIT) {
    $this->RightExitIVR();
}

$value = $this->lastDigit;

?>
```
> Get digit selected with [<code>$value = $this->lastDigit;</code>](#library-variables)
> > <code>$result[0] == TVOX_IVR_CALLER_EXIT`</code> check if caller hangup the call and [<code>$this->RightExitIVR()</code>](#exit-with-good-state) close call statistics with correct values.

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with four parameters 

<code>
$val = array($fileName, $digits, $variableName, $timeoutDigits)
</code>

Parameter |  Description
--------- |  -----------
$fileName | Audio file name to play before collect digits
$digits | Array with list of the permitted digits
$variableName | Variable name to save
$timeoutDigits | Maximum timeout for digits insert

<aside class="notice">
When proposing the options, the choice is saved in the call variable only if necessary to statistics
</aside>

# Play stored digits

Read variable and play digit saved

<code>Ivr_saysaved($val = array()) </code>

```php
<?php

define("CUSTOMER_CODE", "CUSTOMER_CODE");
$this->Ivr_saysaved(array(CUSTOMER_CODE));

?>
```

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with varible name as parameter

<aside class="notice">
Play only numeric digits, can't play alphanumeric values
</aside>

# Check service is active

Check if service is Active

<code>Ivr_check_service_active($servToCheck)</code>

```php
<?php

$serviceToCheck = "service_code";
$active = $this->Ivr_check_service_active($serviceToCheck);

?>
```
> Make sure to replace <code>`service_code`</code> with the service code to check.
> Value <code>$active</code> is boolean 

Parameter | Default | Description
--------- | ------- | -----------
$servToCheck | | check if this service code is active

<aside class="notice">
Service is active when calendar is open and agents are logged (if queue is configured)
</aside>

# Transfer call to service

Transfer call to service

<code>Ivr_load_serv($val = array())</code>

```php
<?php

$service = "service_code";
$this->Ivr_load_serv(array($service));
$this->RightExitIVR();

?>
```
> Make sure to replace <code>`service_code`</code> with the service code to check.
> [<code>$this->RightExitIVR()</code>](#exit-with-good-state) close call statistics with correct values.

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with service code as value


# Transfer call to service advanced

Transfer call to service with advanced settings

<code>Ivr_l_s_extend($val = array())</code>

```php
<?php

$servCode = "service_code";
$servLabel = "New label";
$servPriority = "1";
$servCallLimit = "5";
$servQueueLimit = "2";
$maxQueuedCallPercentage = "";
$servRecording = "1";
$servSkill1 = "skill1";
$servSkill2 = "skill2";
$servSkill3 = "skill3";
$servSkill4 = "";
$servSkill5 = "";
$this->Ivr_l_s_extend(array($servCode, $servLabel, $servPriority, $servCallLimit, $servQueueLimit, $maxQueuedCallPercentage, $servRecording, $servSkill1, $servSkill2, $servSkill3, $servSkill4, $servSkill5));
$this->RightExitIVR();

?>
```
> Make sure to replace <code>`service_code`</code> with the service code to check.
> [<code>$this->RightExitIVR()</code>](#exit-with-good-state) close call statistics with correct values.

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with service parameters

<code>
$val = array($servCode, $servLabel, $servPriority, $servCallLimit, $servQueueLimit, $maxQueuedCallPercentage, $servRecording, $servSkill1, $servSkill2, $servSkill3, $servSkill4, $servSkill5)
</code>

Parameter |  Description | Usage
--------- |  ----------- | -------
$servCode | Service code to tranfer to | Required 
$servLabel | Label to show on client near service name | Optional
$servPriority | Service priority | Optional
$servCallLimit | Setting the maximum number of calls managed by the service for calls passing through the current node. | Optional
$servQueueLimit | Setting the limit for calls in the queue to the service for calls passing through the current node. | Optional
$maxQueuedCallPercentage | Settings limit in percentage on agents logged for calls passing through the current node. | Optional
$servRecording | Call will be recorded when the operator answers. | Optional
$servSkill1 | First Skillset, in priority order, in calls distibution for the selected service. | Optional
$servSkill2 | Second skillset, in priority order, in calls distibution for the selected service. | Optional
$servSkill3 | Third skillset, in priority order, in calls distibution for the selected service. | Optional
$servSkill4 | Fourth skillset, in priority order, in calls distibution for the selected service. | Optional
$servSkill5 | Fifth skillset, in priority order, in calls distibution for the selected service.  | Optional

# Call internal number

Call internal number

<code>Ivr_dial($val = array())</code>

```php
<?php

$number = "internal_number";
$this->Ivr_dial(array($number));
$this->RightExitIVR();

?>
```
> Make sure to replace <code>`internal_number`</code> with the internal number to call.<br> Get call result with [<code>getDialResult()</code>](#get-dial-result)
> [<code>$this->RightExitIVR()</code>](#exit-with-good-state) close call statistics with correct values.

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with internal number as value



# Call external number

Call external number

<code>Ivr_dial_exter($val = array())</code>

```php
<?php

$extNumber = "external_number";
$timeToDial = "180";
$dialRetry = "3";
$callEnable = "1";
$this->Ivr_dial_exter(array($extNumber));
$this->RightExitIVR();

?>
```
> Make sure to replace <code>`external_number`</code> with the external number to call. <br> Get call result with [<code>getDialResult()</code>](#get-dial-result)
> [<code>$this->RightExitIVR()</code>](#exit-with-good-state) close call statistics with correct values.

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with some parameters as value

<code>
$val = array($extNumber, $timeToDial, $dialRetry, $callEnable);
</code>

Parameter   |  Description | Usage
---------   |  ----------- | -------
$extNumber  | Number to call  | Required 
$timeToDial | Time for call duration in seconds | Optional
$dialRetry  | Number of attempts to call the entered number  | Optional
$callEnable | Call enabling number, configured in the TVox system | Optional

# Get dial result

Get dial result

<code>getDialResult()</code>

```php
<?php

$result = $this->getDialResult();

?>
```

Result |  Description
--------- |  -----------
NOANSWER |  Call not answered
ANSWER |  Call answered
CANCEL |  Call is cancelled
BUSY |  Called number was busy
CONGESTION |  No lines available to call
CHANUNAVAIL |  No routing to PSTN

# Play TTS text

Play text as audio

<code>Ivr_speech_synthesize($val = array())</code>

```php
<?php

$textValue = "text_to_play";
$options = array("text" => $textValue, "language" => "it-IT","voice" => "Luca", "gender" => "male" );

$result = $this->Ivr_speech_synthesize($options);
if ($res[0] == TVOX_IVR_CALLER_EXIT || $res[0] == TVOX_IVR_FORCED_EXIT || $res[0] == TVOX_IVR_ERROR) {
  $this->RightExitIVR();
}

?>
```

> If exit with this dial state [TVOX_IVR_CALLER_EXIT, TVOX_IVR_FORCED_EXIT, TVOX_IVR_ERROR](#dial-result), close call statistics with correct values [<code>$this->RightExitIVR()</code>](#exit-with-good-state)

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with tts options

<code>array("text" => $textValue, "language" => "it-IT","voice" => "Luca", "gender" => "male" );</code>

Parameter |  Description
--------- |  -----------
text | Text plaied from system
language |  Text language to read for play (depend on TTS server)
voice | Voice's name to play text (depend on TTS server)
gender | Voice's gender to play text (depend on TTS server)
timeout | Timeout for waiting digit if you want make selection

# Get value from caller speak 

Recognize caller voice command based on grammar voice and get value. 

<code>Ivr_speech_recognition($val = array())</code>

```php
<?php

$fileName = "audio_file";
$grammar = "grammar.grxml";
$options = array("file" => $fileName, "grammar" => $grammar, "language" => "it-IT","voice" => "Luca", "gender" => "male" );

$result = $this->Ivr_speech_recognition($options);
if ($res[0] == TVOX_IVR_CALLER_EXIT) {
  $this->RightExitIVR();
}

$result = $this->Agi->get_variable(TVOX_RECOG_RESULT);
$value = $result["data"];

?>
```
> Make sure to replace <code>`audio_file`</code> with the system audio file and <code>`grammar.grxml`</code> with the correct grammar
> If exit with this dial state [TVOX_IVR_CALLER_EXIT](#dial-result), close call statistics with correct values [<code>$this->RightExitIVR()</code>](#exit-with-good-state)

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Array have some values

Parameter |  Description
--------- |  -----------
file | Audio file to play before recognition
grammar | Grammar to match voice command
language |  Text language to read for play (depend on TTS server)
voice | Voice's name to play text (depend on TTS server)
gender | Voice's gender to play text (depend on TTS server)
timeout | Timeout for waiting digit if you want make selection

# Start call recording

Record call and store to file

<code>Ivr_start_rec($clid, $dnis, $type = "O", $ivrDoMix = false, $recOnlyCallerChannel = false)</code>

```php
<?php

$clid = "clid_number";
$dnis = "dnis_number"
$type = "I";
$ivrDoMix = true;
$recOnlyCallerChannel = true;

$filenameRecorded = $this->Ivr_start_rec($clid, $dnis, $type, $ivrDoMix, $recOnlyCallerChannel);

$this->lastDigit = NULL;
$result = $this->Ivr_choose_option(array("", $digits, NULL, 1800));
if ($result[0] == TVOX_IVR_CALLER_EXIT) {
    $this->RightExitIVR();
}

if (isset($this->lastDigit) && $this->lastDigit != "") {
    $note="recording_note";
    $dest = $this->Ivr_stop_rec($note);
}

?>
```

> If exit with this dial state [TVOX_IVR_CALLER_EXIT](#dial-result), close call statistics with correct values [<code>$this->RightExitIVR()</code>](#exit-with-good-state)

Parameter | Default | Description
--------- | ------- | -----------
$clid |  | Caller's number
$dnis | | Called number
$type | "O" | Call direction, important for statistics ( values are "I" or "O")
$ivrDoMix | false |  If true, the file is available when Ivr_stop_rec is called otherwise it waits until the system has produced it
$recOnlyCallerChannel | false | If true record only caller voice else record the caller voice and the music on hold and other system files

# Stop call recording

Stop call recording when started

<code>Ivr_stop_rec($note = NULL, $buffer = false)</code>

```php
<?php

$note = "recording_note";

$destination = $this->Ivr_stop_rec($note);

?>
```
> Make sure to replace <code>`recording_note`</code> with the note to attach file.
> <code>$destination</code> value is recorded file path

Parameter | Default | Description
--------- | ------- | -----------
$note | NULL |  Set recording note to show in statistics
$buffer | false | If true, the system automatically transfers to the standard tvox memory, otherwise the script have to manage the file by itself

# Update popup values

Updates the popup data referring to the particular call

<code>set_collect_data($data)</code>

```php
<?php

$data = "value=12345";

$this->set_collect_data($data);

?>
```
Parameter |  Description
--------- |  -----------
$data | String values that are stored in database tu update popup

# Send DTMF

Send DTMF digit to call

<code>Ivr_send_dtmf($val = array())</code>

```php
<?php

$dtmf = array("1");

$this->Ivr_send_dtmf($dtmf);

?>
```

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Pass array with dtmf number as value

# Load service voicemail

Load service's voicemail

<code>Ivr_voicemail($val = array())</code>

```php
<?php

$this->Ivr_voicemail();
$this->RightExitIVR();

?>
```

> [<code>$this->RightExitIVR()</code>](#exit-with-good-state) close call statistics with correct values.

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | If used by the script, no parameters are needed. Remember to configure the parameters from the web interface

# Load service if in calls limit

Loads the service if number calls not exceeded limit

<code>Ivr_countcall($val = array())</code>

```php
<?php

$actionService = "service_code";
$serviceToMonitor = "monitor_service_code";
$whatCount = "GLOBAL_CALL_COUNT";
$limit = 10

$this->Ivr_countcall(array($limit, $whatCount, $serviceToMonitor, $actionService));

?>
```

Parameter | Default | Description
--------- | ------- | -----------
$val | array() | Array parameter with some parameters

array($limit, $whatCount, $serviceToMonitor, $actionService)

Parameter | Description
--------- | -----------
$limit | Set call limit to load service
$whatCount | Check  what count from detect call service limit: cases are: GLOBAL_CALL_COUNT, QUEUE_COUNT, ANSWER_COUNT
$serviceToMonitor | Service where monitor call limits 
$actionService |  Service to load after calls limit check


# Check if call channel is up

Check if call channel is active

<code>Ivr_isChannelUp()</code>

```php
<?php

$channelUp = $this->Ivr_isChannelUp();

?>
```

> <code> $ channelUp </code> returns a Boolean value: true if channel active, false otherwise

# Hangup call

Hangup current call 

<code>Ivr_hangup($val = null)</code>

```php
<?php

$this->Ivr_hangup();
$this->RightExitIVR();

?>
```

> [<code>$this->RightExitIVR()</code>](#exit-with-good-state) close call statistics with correct values.

# Exit with error

Exit from Ivr and set Error in statistics 

<code>Ivr_error()</code>

```php
<?php

$this->Ivr_error();

?>
```

# Exit with good state

Exit from Ivr with correct state for statistics

<code>RightExitIVR($start = null)</code>


```php
<?php

$this->RightExitIVR();

?>
```

Parameter | Default | Description
--------- | ------- | -----------
$start | null | Time when ivr was started, if not set, the value is the starting value of the ivr script


# Update call statistics

Update call statistics for custom report, is not needed if you want standard use

<code>incrementStatistics($startTime, $service = NULL, $node = NULL, $step = NULL, $action = NULL)</code>

Parameter | Default | Description
--------- | ------- | -----------
$startTime |  | Time when statistics is started
$service | NULL | Service code where active updates
$node | NULL | Node number (if is null take current number)
$step | NULL | Step number of node (if null take current node) 
$action | NULL | Label for stats 

# Log

To access log, need enable windows sharing on TVox web interface.<br>
After enabling it, we can see the logs on the folder by logging in with the default username and password (ivrcustom: ivrcustom) via share samba.<br>

Default log is info, to enable full log open asterisk cli from tamadmin user.

when the asterisk cli is shown put command:

<code>
dialplan set global TVOX_DEBUG 3
</code>

if need show fatal errors need enable asterisk agi:

<code>agi set debug on</code>

## Info

Log level INFO

<code>info($msg, $debug_val = false, $val = array())</code>

```php
<?php

$this->info("log_message");

?>
```
> Make sure to replace <code>`log_message`</code> with the message to log.

Parameters | Default | Description
---------- | ------- | -----------
$msg       |         | Message to log
$debug_val | false   | If set to true $val is logged to file
$val       | array() | Variable to log

If need dump variable to info log use 

<code>info_var_dump($msg, $val = array())</code>

```php
<?php

$value = array("1","2","3");
$this->info_var_dump("log_message",$value);

?>
```
> Make sure to replace <code>`log_message`</code> with the message to log.
> Dump variable Array or Object to log message

Parameters | Default | Description
---------- | ------- | -----------
$msg       |         | Message to log
$val       | array() | Variable to log

## Debug

Log level DEBUG

<code>debug($msg, $debug_val = false, $val = array())</code>

```php
<?php

$this->debug("log_message");

?>
```
> Make sure to replace <code>`log_message`</code> with the message to log.

Parameters | Default | Description
---------- | ------- | -----------
$msg       |         | Message to log
$debug_val | false   | If set to true $val is logged to file
$val       | array() | Variable to log

If need dump variable to debug log use 

<code>debug_var_dump($msg, $val = array())</code>

```php
<?php

$value = array("1","2","3");
$this->debug_var_dump("log_message",$value);

?>
```
> Make sure to replace <code>`log_message`</code> with the message to log.
> Dump variable Array or Object to log message

Parameters | Default | Description
---------- | ------- | -----------
$msg       |         | Message to log
$val       | array() | Variable to log

## Trace

Log level TRACE

<code>trace($msg, $debug_val = false, $val = array())</code>

```php
<?php

$this->trace("log_message");

?>
```
> Make sure to replace <code>`log_message`</code> with the message to log.

Parameters | Default | Description
---------- | ------- | -----------
$msg       |         | Message to log
$debug_val | false   | If set to true $val is logged to file
$val       | array() | Variable to log

If need dump variable to trace log use 

<code>trace_var_dump($msg, $val = array())</code>

```php
<?php

$value = array("1","2","3");
$this->trace_var_dump("log_message",$value);

?>
```
> Make sure to replace <code>`log_message`</code> with the message to log.
> Dump variable Array or Object to log message

Parameters | Default | Description
---------- | ------- | -----------
$msg       |         | Message to log
$val       | array() | Variable to log

# Variables

Library variables

## Agi variables

Is possible get variables from agi, some variables are:

Variable Name | Description
------------- | -----------
Clid          | Caller number 
Dnis          | Dialed number
CallId        | Call identification number
Service Code  | Service code

> To get this values use this code:

```php
<?php

$clid = $this->Agi->request["agi_callerid"];
$dnis = $this->Agi->request["agi_dnid"];
$callId = $this->Agi->request["agi_uniqueid"];
$serviceCode = $this->Agi->request["agi_extension"];  

?>
```


## Dial Result

Variable Name | Value | Description
------------- | ----- | -----------
TVOX_IVR_CONTINUE | 0 | Continue with IVR script (next step)
TVOX_IVR_CALLER_EXIT | -1 | Caller hangup call
TVOX_IVR_FORCED_EXIT | -2 | Force call close 
TVOX_IVR_INVALID | -3 | Invalid option insert
TVOX_IVR_TIMEOUT | -4 | Digit timeout reached
TVOX_IVR_TRANSFER_CALL | -5 | Call is trasfered
TVOX_IVR_ERROR | -8 | Generic Error

## Asr variables

Variable Name | Description
------------- | -----------
 TVOX_RECOG_INSTANCE  | Result string from grammar recognition
 TVOX_RECOG_RESULT  | Speech result
  TVOX_RECOG_DATA  | String result value from match
 TVOX_RECOG_DTMF  | Digit insert during speech
 
TVOX_RECOG_RESULT can have some values:<br>

* NO_INPUT 
* NO_MATCH 
* OK 
* ERROR 

## TTS Variables

Variable Name | Value | Description
------------- | ----- | -----------
 TVOX_SYNTH_DTMF  | TVOX_SYNTH_DTMF | Digit insert during or after play

## Library Variables

Variable Name | Description
------------- | -----------
$Agi          | Agi variable where get some call viariables or funcitons
$UniqueID     | Call unique id
$lastDigit    | Is updated when a [<code>Ivr_choose_option()</code>](#choose-option) is called, store last digit selection, need reset before other [<code>Ivr_choose_option()</code>](#choose-option)

<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>